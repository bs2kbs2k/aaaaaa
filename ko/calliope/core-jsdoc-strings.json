{
    "Math.abs": "(그 값의 부호와 상관없이) 어떤 수의 절대값을 리턴합니다.\n예를 들어, -5와 5의 절대값은 모두 5입니다.",
    "Math.abs|param|x": "",
    "Math.max": "",
    "Math.min": "",
    "Math.pow": "",
    "Math.pow|param|x": "",
    "Math.pow|param|y": "",
    "Math.random": "",
    "Math.randomBoolean": "'참(true)' 또는 '거짓(false)' 값을 랜덤으로 리턴합니다. 동전을 던져, 앞뒤를 확인하는 것과 비슷합니다.",
    "Math.sign": "",
    "Math.sign|param|x": "",
    "Math.sqrt": "",
    "Math.sqrt|param|x": "",
    "String.charAt": "",
    "String.charAt|param|index": "",
    "String.charCodeAt": "",
    "String.charCodeAt|param|index": "",
    "String.compare": "",
    "String.compare|param|that": "비교할 문자열",
    "String.concat": "두 개 이상의 문자열을 결합한 문자열을 리턴합니다.",
    "String.concat|param|other": "",
    "String.fromCharCode": "아스키(ASCII) 코드 정수 값을, 문자로 만들어 리턴합니다.",
    "String.isEmpty": "",
    "String.length": "",
    "String.substr": "현재 문자열의 일부를 잘라만든, 부분 문자열을 리턴합니다.",
    "String.substr|param|length": "잘라낼 문자의 개수",
    "String.substr|param|start": "첫 문자 위치; 마지막 문자에서 부터 시작해서 음수 가능, 예시: 0",
    "basic": "마이크로비트의 모든 기본 기능을 사용할 수 있도록 해줍니다.",
    "basic.clearScreen": "모든 LED를 꺼서, 스크린을 지웁니다.",
    "basic.color": "",
    "basic.forever": "백그라운드에서 코드를 무한 반복 실행합니다. 백그라운드로 실행하는 동시에, 다른 코드를 함께 실행시킬 수 있습니다.",
    "basic.pause": "원하는 시간(ms, 1/1000초) 동안, 아무 작업도 하지 않고 시간을 보냅니다.",
    "basic.pause|param|ms": "예를 들면 다음과 같은 밀리초가 가능합니다: 100, 200, 500, 1000, 2000",
    "basic.plotLeds": "LED 스크린 화면에 5*5 픽셀의 이미지를 만들어 출력합니다.",
    "basic.plotLeds|param|leds": "on/off 시킬 LED 패턴",
    "basic.rgbw": "",
    "basic.rgbw|param|blue": "",
    "basic.rgbw|param|green": "",
    "basic.rgbw|param|red": "",
    "basic.rgbw|param|white": "",
    "basic.setLedColor": "",
    "basic.showAnimation": "LED 스크린 화면에 애니메이션을 그려 보여줍니다.",
    "basic.showAnimation|param|interval": "화면 갱신 시간(밀리초)",
    "basic.showAnimation|param|leds": "on/off 시킬 LED 패턴",
    "basic.showLeds": "LED 스크린 화면에 5*5 픽셀의 이미지를 만들어 출력합니다.",
    "basic.showLeds|param|interval": "화면에 그린 후 유지시킬 시간(밀리초)",
    "basic.showLeds|param|leds": "on/off 시킬 LED 패턴",
    "basic.showNumber": "화면에 숫자를 스크롤합니다. 한 번에 화면에 그릴 수 있으면(즉, 한 자리 숫자), 스크롤하지 않습니다.",
    "basic.showNumber|param|interval": "스크롤 스피드; 예시: 150, 100, 200, -100",
    "basic.showString": "스크린에 한 번에 한 개의 문자씩, 텍스트를 출력합니다. 문자를 한 화면으로 출력할 수 있으면(즉 문자 1개), 스크롤하지 않습니다.",
    "basic.showString|param|interval": "문자 변경 속도; 예시: 150, 100, 200, -100",
    "basic.showString|param|text": "스크린에 스크롤할 문자, 예시: \"Hello!\"",
    "control": "실행중/이벤트 유틸리티",
    "control.assert": "",
    "control.deviceName": "",
    "control.deviceSerialNumber": "",
    "control.eventSourceId": "",
    "control.eventTimestamp": "마지막으로 실행되었던 이벤트의 타임스탬프 값을 가져옵니다.",
    "control.eventValue": "마지막으로 실행되었던 이벤트 값을 가져옵니다.",
    "control.eventValueId": "",
    "control.inBackground": "코드를 백그라운드로 실행하도록 합니다.",
    "control.onEvent": "이벤트 신호를 발생시킵니다.",
    "control.panic": "",
    "control.raiseEvent": "이벤트 신호를 발생시킵니다.",
    "control.raiseEvent|param|mode": "",
    "control.raiseEvent|param|src": "",
    "control.raiseEvent|param|value": "",
    "control.reset": "BBC 마이크로비트를 리셋합니다.",
    "control.runtimeWarning": "",
    "control.waitMicros": "현재 수행하고 있는 작업 상태를, 마이크로초 단위로 대기(유지)시킵니다.",
    "control.waitMicros|param|micros": "대기(유지)시킬 마이크로초 시간. 예시: 4",
    "game": "LED 1개 움직이는 게임 엔진",
    "game.addLife": "",
    "game.addLife|param|lives": "",
    "game.addScore": "현재 점수에 포인트를 추가합니다.",
    "game.addScore|param|points": "점수에 추가 시키고 싶은 양, 예시: 1",
    "game.createSprite": "오른쪽 방향을 바라보는 상태의 새로운 스프라이트를 생성합니다.",
    "game.createSprite|param|x": "",
    "game.createSprite|param|y": "",
    "game.currentTime": "",
    "game.gameOver": "게임 오버 애니메이션을 출력합니다.",
    "game.invalidSprite": "",
    "game.isGameOver": "",
    "game.isRunning": "",
    "game.level": "",
    "game.levelUp": "",
    "game.life": "",
    "game.removeLife": "",
    "game.removeLife|param|life": "",
    "game.score": "현재 점수를 읽어옵니다.",
    "game.setLife": "",
    "game.setLife|param|value": "",
    "game.setScore": "현재 점수를 설정 합니다.",
    "game.setScore|param|value": "",
    "game.showScore": "",
    "game.startCountdown": "게임 카운트다운 타이머를 돌리기 시작합니다.",
    "game.startCountdown|param|ms": "밀리초 단위의 카운트 다운 시간, 예시: 10000",
    "game.startStopwatch": "",
    "images": "LED 이미지를 만들고, 수정하고, 출력해줍니다.",
    "images.createBigImage": "2배 크기의 이미지를 만듭니다.",
    "images.createImage": "LED 스크린 크기의 이미지를 만듭니다.",
    "input": "센서들로부터 전송된 이벤트와 데이터",
    "input.acceleration": "가속도 센서로 읽어들인 가속도 값을 밀리g 단위로 읽어옵니다.(스크린을 하늘 방향으로 놓은 상태에서는x=0, y=0, z=-1024 가 됩니다.)",
    "input.acceleration|param|dimension": "",
    "input.buttonIsPressed": "``A``, ``B`` 버튼의 상태를 읽어옵니다.(눌림, 놓임)",
    "input.calibrate": "구버전입니다. 자기(나침반) 센서 보정은 자동으로 이루어집니다.",
    "input.compassHeading": "자기(나침반) 센서로 읽어들인, 북극 방향의 각도를 읽어옵니다.(나침반 바늘이 가리키는 북쪽 방향)",
    "input.lightLevel": "빛 센서로 읽어들인 빛의 밝기를 0(어두움) ~ 255(가장 밝음) 범위로 변환해 읽어옵니다. LED 스크린을 빛 센서 입력처럼 사용합니다.",
    "input.magneticForce": "자기(나침반) 센서로 감지한 자기력 값을, `마이크로-테슬라` (`µT`) 단위로 읽어옵니다.\n 시뮬레이터에서는 이 기능을 시험해 볼 수 없습니다.",
    "input.magneticForce|param|dimension": "",
    "input.onButtonPressed": "버튼(A, B, A+B)을 누르면, 설정한 작업을 실행합니다.",
    "input.onButtonPressed|param|body": "",
    "input.onButtonPressed|param|button": "",
    "input.onGesture": "제스쳐(마이크로비트를 흔드는 것과 같은) 동작이 발생하면, 설정한 작업을 실행합니다.",
    "input.onGesture|param|body": "",
    "input.onLogoDown": "마이크로비트 보드를 세운 후, 마이크로비트 마크를 땅 바닥쪽으로 향하게 돌렸을 때, 실행시킬 코드를 붙입니다.",
    "input.onLogoDown|param|body": "",
    "input.onLogoUp": "마이크로비트 보드를 세운 후, 마이크로비트 마크를 하늘쪽으로 향하게 돌렸을 때, 실행시킬 코드를 붙입니다.",
    "input.onLogoUp|param|body": "",
    "input.onPinPressed": "핀이 연결(on)되면, 설정한 작업을 실행합니다.",
    "input.onPinPressed|param|body": "핀을 연결했다 놓았을 때 실행시킬 코드",
    "input.onPinPressed|param|name": "",
    "input.onPinReleased": "핀이 연결(on)되었다가 끊기면(off), 설정한 작업을 실행합니다.",
    "input.onPinReleased|param|body": "핀이 연결되었다가 끊기면 실행시킬 코드",
    "input.onPinReleased|param|name": "",
    "input.onScreenDown": "스크린이 땅바닥 방향을 향할 때, 실행시킬 코드를 붙입니다.",
    "input.onScreenDown|param|body": "",
    "input.onScreenUp": "스크린이 하늘 방향을 향할 때, 실행시킬 코드를 붙입니다.",
    "input.onScreenUp|param|body": "",
    "input.onShake": "흔들었을 때, 실행시킬 코드를 붙입니다.",
    "input.onShake|param|body": "",
    "input.pinIsPressed": "핀의 눌림(연결) 여부 상태를 감지합니다. 접지(GND)와 연결시키면 회로가 끊깁니다.",
    "input.pinIsPressed|param|name": "",
    "input.rotation": "기울기 센서로 읽어들인, 앞-뒤 또는 좌-우로 기울여진 기울기 값을 읽어옵니다. ``x-축`` 또는 ``y-축`` 회전 각도.",
    "input.rotation|param|kind": "",
    "input.runningTime": "전원이 켜진 후 흐른 시간을 밀리초(ms) 단위로 읽어옵니다.",
    "input.setAccelerometerRange": "가속도 센서의 감지 기준값을 원하는 중력가속도(g)로 설정합니다.",
    "input.setAccelerometerRange|param|range": "측정할 최대 중력 가속도의 크기를 설정합니다.",
    "input.temperature": "온도 센서로 읽어들인 온도를, 섭씨(°C) 단위로 읽어옵니다.",
    "led": "LED 스크린 제어",
    "led.brightness": "현재 LED 스크린의 LED 밝기 설정 값을 읽어옵니다. 0(끔) ~ 255(가장 밝음)",
    "led.enable": "스크린의 모든 LED를 켜거나 끕니다.",
    "led.fadeIn": "LED 스크린을 천천히 밝게 켭니다.",
    "led.fadeIn|param|ms": "",
    "led.fadeOut": "LED 스크린을 천천히 어둡게 끕니다.",
    "led.fadeOut|param|ms": "",
    "led.plot": "원하는 LED를 x좌표(위에서 아래로), y좌표(왼쪽에서 오른쪽으로)를 이용해 켭니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.plotAll": "스크린의 모든 LED를 켭니다.",
    "led.plotBarGraph": "`표현할 값`과 `가능한 최댓값`을 이용해, LED 스크린에 그 비율을 표현하는 형태의 막대 그래프를 출력합니다. 만약 `가능한 최댓값`이 0 이면, 자동으로 조정됩니다.",
    "led.plotBarGraph|param|high": "최대 값. 만약, 0인 경우, 최대 값이 자동으로 조정됩니다. 예시: 0",
    "led.plotBarGraph|param|value": "막대 그래프형으로 LED 스크린에 표현할 값",
    "led.plot|param|x": "",
    "led.plot|param|y": "",
    "led.point": "LED의 on/off 상태를, x좌표(위에서 아래로)와 y좌표(왼쪽에서 오른쪽으로)를 이용해 읽어옵니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.point|param|x": "",
    "led.point|param|y": "",
    "led.screenshot": "LED 스크린의 상태를 이미지로 가져옵니다.",
    "led.setBrightness": "스크린의 LED 밝기를, 0(어두움) ~ 255(가장 밝음) 범위의 정수 값으로 설정합니다.",
    "led.setBrightness|param|value": "밝기 값, 예시:255, 127, 0",
    "led.setDisplayMode": "LED를 이용해 이미지/애니메이션을 표시하기 위해, LED 스크린의 디스플레이모드를 흑/백, 그레이스케일로 설정합니다.",
    "led.setDisplayMode|param|mode": "LED 스크린을 동작시킬 디스플레이 모드",
    "led.stopAnimation": "LED 스크린 애니메이션을 중단하고, 실행 대기 상태에 있는 다른 애니메이션도 모두 삭제합니다.",
    "led.toggle": "LED 상태를 반대로 바꿉니다.(on->off, off->on)",
    "led.toggleAll": "현재 상태의 반대로 LED 상태를 바꿉니다.",
    "led.toggle|param|x": "",
    "led.toggle|param|y": "",
    "led.unplot": "원하는 LED를 x좌표(위에서 아래로), y좌표(왼쪽에서 오른쪽으로)를 이용해 끕니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.unplot|param|x": "",
    "led.unplot|param|y": "",
    "motors": "온보드모터 제어 블록",
    "motors.dualMotorPower": "",
    "motors.motorCommand": "",
    "motors.motorPower": "",
    "motors.motorPower|param|power": "",
    "music": "",
    "music.beat": "음을 지속할 박자(시간). 밀리초(ms)",
    "music.changeTempoBy": "원하는 빠르기로 바꿉니다.",
    "music.changeTempoBy|param|bpm": "빠르기 변화 값, 예시: 20",
    "music.noteFrequency": "음계 또는 음의 주파수",
    "music.noteFrequency|param|name": "음 이름",
    "music.playTone": "",
    "music.playTone|param|ms": "밀리초(ms) 단위 지속 시간",
    "music.rest": "`P0` 번 핀을 통해 원하는 원하는 박자의 시간만큼 유지합니다.(음을 바꾸지는 않습니다.)",
    "music.rest|param|ms": "밀리초(ms) 단위 무음 시간",
    "music.ringTone": "",
    "music.ringTone|param|frequency": "",
    "music.setTempo": "원하는 빠르기를 설정합니다.",
    "music.setTempo|param|bpm": "새로운 분당 템포 비트, 예시: 120",
    "music.tempo": "현재 빠르기(bpm)를 읽어옵니다. 빠르기는 음이 재생되는 속도(bpm = 1분당 비트 수)를 의미합니다. 빠르기 값이 크면 클 수록, 악보가 빠르게 연주됩니다.",
    "pins": "디지털/아날로그 신호, 서보, I2C ... 에서 사용되는 핀의 전류를 제어합니다.",
    "pins.analogPitch": "PWM(Pulse-width modulation) 신호를 현재의 주파수 출력 핀에 발생 시킵니다. 주파수 출력 핀을 설정하기 위해서는 `아날로그 주파수 출력 핀' 메뉴를 사용하면 됩니다.",
    "pins.analogPitch|param|frequency": "",
    "pins.analogPitch|param|ms": "",
    "pins.analogReadPin": "아날로그로 커넥터 값을 읽습니다. 아날로그 값의 범위는 0 부터 1023 까지 범위의 값으로 읽어들입니다.",
    "pins.analogReadPin|param|name": "",
    "pins.analogSetPeriod": "설정한 **밀리초** 또는 `1/1000` 밀리초 값으로 아날로그 PWM 출력을 설정합니다.\n(`아날로그 출력 핀` 을 이용해) 아날로그 출력 핀으로 설정되어있지 않은 경우에는, 효과가 없습니다.",
    "pins.analogSetPeriod|param|micros": "마이크로초 단위 시간. 예시:20000",
    "pins.analogSetPeriod|param|name": "",
    "pins.analogSetPitchPin": "",
    "pins.analogSetPitchPin|param|name": "",
    "pins.analogWritePin": "아날로그로 커넥터 값을 출력합니다. 아날로그 값의 범위는 0 부터 1023 까지 범위의 값으로 출력할 수 있습니다.",
    "pins.analogWritePin|param|name": "",
    "pins.analogWritePin|param|value": "핀으로 출력할 값 ``0`` 부터 ``1023``. 예시:1023,0",
    "pins.createBuffer": "",
    "pins.createBuffer|param|size": "",
    "pins.digitalReadPin": "원하는 핀이나 커넥터에서 0 또는 1의 값만 읽어들입니다.",
    "pins.digitalReadPin|param|name": "",
    "pins.digitalWritePin": "핀이나 커넥터에 0 또는 1의 값만 출력합니다.",
    "pins.digitalWritePin|param|name": "",
    "pins.digitalWritePin|param|value": "핀에 설정할 값, 1 또는 0",
    "pins.i2cReadBuffer": "",
    "pins.i2cReadNumber": "7비트 I2C 주소에서 값을 읽음",
    "pins.i2cWriteBuffer": "",
    "pins.i2cWriteNumber": "7비트 I2C 주소에 값을 씀",
    "pins.map": "어떤 범위의 값을 다른 범위의 값으로 다시 매핑합니다. 즉,``이전 최소값`` 은 ``최소값``으로, ``이전 최대값`` 은 ``최대값``으로 범위가 변경되고, 이전 범위에 포함되는 값도 새로운 범위 이내의 값으로 변경됩니다.",
    "pins.map|param|fromHigh": "현재 전류값의 최대 범위, 예시: 1023",
    "pins.map|param|fromLow": "현재 전류값의 최소 범위",
    "pins.map|param|toHigh": "변경할 전류값의 최대 범위, 예시: 4",
    "pins.map|param|toLow": "변경할 전류값의 최소 범위",
    "pins.map|param|value": "범위를 변경할 현재 값",
    "pins.onPulsed": "이 핀을 디지털 입력 핀으로 설정하고, 핀의 ``high``, ``low`` 상태를 주기적으로 검사해 이벤트를 발생시킵니다.",
    "pins.pulseDuration": "마이크로초 단위로 펄스 주파수의 길이를 측정합니다. 이 기능은 ``디지털입력 감지하면 실행`` 이벤트 핸들러에 의해서 호출되어야 합니다.",
    "pins.pulseIn": "",
    "pins.pulseIn|param|name": "",
    "pins.pulseIn|param|value": "",
    "pins.servoSetPulse": "이 입출력 핀에 원하는 **microseconds** 나 `1/1000` 밀리초로, 아날로그/PWM 출력, 20ms 주기, 진폭을 설정합니다.",
    "pins.servoSetPulse|param|micros": "마이크로초 단위의 펄스 주기, 예시:1500",
    "pins.servoSetPulse|param|name": "핀 이름",
    "pins.servoWritePin": "서보 회전을 제어하는 값을 출력합니다. 일반 서보에서는, 축의 각도(도 단위)를 설정하고 원하는 방향으로 축을 회전시킵니다. 무한 회전 서보에서는, 원하는 속도로 축을 회전시킵니다.(``0`` 은 정방향 최고 회전 속도, ``180`` 은 역방향 최고 회전 속도를 의미하고, ``90`` 근처는 회전 하지 않는 값으로 사용됩니다.)",
    "pins.servoWritePin|param|name": "",
    "pins.servoWritePin|param|value": "각도 또는 회전 속력, 예시:180,90,0",
    "pins.setPull": "핀의 pull up/down 모드를 설정합니다.",
    "pins.setPull|param|name": "",
    "pins.setPull|param|pull": "",
    "pins.sizeOf": "",
    "pins.spiWrite": "SPI 슬레이브에 출력하고, 응답을 리턴합니다.",
    "pins.spiWrite|param|value": "SPI 슬레이브에 전송될 데이터",
    "serial": "시리얼통신 연결을 통해 데이터를 읽어오고 출력합니다.",
    "serial.delimiters": "",
    "serial.onLineReceived": "",
    "serial.readLine": "",
    "serial.readUntil": "",
    "serial.readUntil|param|delimiter": "구분 기호는 각 텍스트 문자열들을 분리합니다.",
    "serial.redirect": "",
    "serial.redirect|param|rx": "",
    "serial.redirect|param|tx": "",
    "serial.writeLine": "",
    "serial.writeNumber": "",
    "serial.writeString": "",
    "serial.writeValue": "",
    "serial.writeValue|param|name": "값 스트림 이름, 예시: x",
    "serial.writeValue|param|value": "쓰기"
}