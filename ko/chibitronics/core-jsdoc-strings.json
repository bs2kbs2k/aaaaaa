{
    "Array": "목록의 항목을 추가 및 제거하고 바꿉니다.\n\n목록의 항목을 추가 및 제거하고 바꿉니다.",
    "Array.every": "",
    "Array.every|param|callbackfn": "",
    "Array.filter": "콜백 함수에 지정된 조건을 충족하는 배열 내 요소를 반환합니다.",
    "Array.filter|param|callbackfn": "인수를 2개까지 허용하는 함수입니다. filter 메서드는 배열의 각 요소에 대해 callbackfn 함수를 한 번 호출합니다.",
    "Array.forEach": "",
    "Array.forEach|param|callbackfn": "",
    "Array.get": "지정한 인덱스에 있는 값을 가져옵니다.",
    "Array.get|param|index": "목록에서 항목의 0 기반 위치입니다(예: 0).",
    "Array.indexOf": "배열에서 어떤 값이 처음 나타난 위치를 찾아 리턴합니다.",
    "Array.indexOf|param|fromIndex": "검색을 시작할 배열 인덱스입니다. fromIndex를 생략하면 인덱스 0부터 검색을 시작합니다.",
    "Array.indexOf|param|item": "배열에서 찾을 값입니다.",
    "Array.insertAt": "배열에서 원하는 위치에 새로운 데이터를 삽입합니다. 배열의 길이가 1만큼 증가됩니다.",
    "Array.insertAt|param|index": "값을 삽입할 목록 내의 0기반 위치입니다(예: 0).",
    "Array.join": "",
    "Array.join|param|sep": "",
    "Array.length": "배열의 길이를 가져오거나 설정합니다. 이 값은 배열에서 마지막 요소의 인덱스보다 1만큼 큰 숫자입니다.",
    "Array.map": "배열의 각 요소에 대해 정의된 콜백 함수를 호출한 후 결과가 포함된 배열을 반환합니다.",
    "Array.map|param|callbackfn": "인수를 2개까지 허용하는 함수입니다. map 메서드는 배열의 각 요소에 대해 callbackfn 함수를 한 번 호출합니다.",
    "Array.pop": "배열의 마지막에 저장되어있는 값을 리턴하고, 그 값을 배열에서 제거합니다.",
    "Array.push": "배열의 마지막에 새로운 데이터를 추가합니다.",
    "Array.reduce": "배열의 모든 요소에 대해 지정된 콜백 함수를 호출합니다. 콜백 함수의 반환 값은 누적된 결과이며 다음 번 콜백 함수 호출 시 인수로 제공됩니다.",
    "Array.reduce|param|callbackfn": "인수를 3개까지 허용하는 함수입니다. reduce 메서드는 배열의 각 요소에 대해 callbackfn 함수를 한 번 호출합니다.",
    "Array.reduce|param|initialValue": "누적을 시작하는 초기 값입니다. callbackfn 함수를 처음 호출하면 배열 값 대신 이 값이 인수로 사용됩니다.",
    "Array.removeAt": "배열에서 원하는 위치에 있는 데이터를 삭제합니다.",
    "Array.removeElement": "개체의 첫 번째 인스턴스를 제거합니다. 제거된 경우 true를 반환합니다.",
    "Array.reverse": "데이터들의 순서를 반대로 뒤집어 만든 배열을 만들어 리턴합니다. 첫 번째 데이터는 마지막 위치로 이동되고, 마지막 데이터는 첫 번째 데이터가 됩니다.",
    "Array.set": "특정 인덱스에 값을 저장합니다.",
    "Array.set|param|index": "값을 저장할 목록 내의 0기반 위치입니다(예: 0).",
    "Array.shift": "배열의 첫 번재 위치에 저장되어있는 값을 리턴하고, 그 값을 배열에서 제거합니다. 배열의 크기(길이)가 줄어듭니다.",
    "Array.slice": "배열의 섹션을 반환합니다.",
    "Array.slice|param|end": "배열에서 지정된 부분의 끝입니다(예: 0).",
    "Array.slice|param|start": "배열에서 지정된 부분의 시작입니다(예: 0).",
    "Array.some": "",
    "Array.some|param|callbackfn": "",
    "Array.sort": "배열의 요소를 정렬한 후 배열을 반환합니다. 이 정렬 작업은 불안정할 수 있습니다.",
    "Array.splice": "배열에서 데이터들을 제거합니다.",
    "Array.splice|param|deleteCount": "제거할 요소의 개수입니다(예: 0).",
    "Array.splice|param|start": "배열에서 요소 제거를 시작할 0기반 위치입니다(예: 0).",
    "Array.unshift": "배열의 첫 번째 위치에 새 데이터를 삽입하고, 배열의 길이를 리턴합니다.",
    "Boolean.toString": "불 값을 문자열로 바꿔 리턴합니다.",
    "Colors": "",
    "Effect": "",
    "Math": "수를 이용한 복잡한 연산입니다.",
    "Math.abs": "(그 값의 부호와 상관없이) 어떤 수의 절대값을 리턴합니다.\n예를 들어, -5와 5의 절대값은 모두 5입니다.",
    "Math.abs|param|x": "",
    "Math.acos": "수의 아크코사인(라디안 단위)을 반환합니다.",
    "Math.acos|param|x": "숫자",
    "Math.asin": "수의 아크사인(라디안 단위)을 반환합니다.",
    "Math.asin|param|x": "숫자",
    "Math.atan": "수의 아크탄젠트(라디안 단위)를 반환합니다.",
    "Math.atan2": "인수 몫의 아크탄젠트를 반환합니다.",
    "Math.atan2|param|x": "숫자",
    "Math.atan2|param|y": "숫자",
    "Math.atan|param|x": "숫자",
    "Math.ceil": "해당 숫자 인수보다 크거나 같은 가장 작은 숫자를 반환합니다.",
    "Math.ceil|param|x": "",
    "Math.cos": "숫자의 코사인을 반환합니다.",
    "Math.cos|param|x": "각도(라디안 단위)",
    "Math.exp": "``e^x``를 반환합니다.",
    "Math.exp|param|x": "숫자",
    "Math.floor": "해당 숫자 인수보다 작거나 같은 가장 큰 숫자를 반환합니다.",
    "Math.floor|param|x": "",
    "Math.idiv": "두 숫자를 나눈 값인 부호 있는 32비트 정수를 반환합니다.",
    "Math.idiv|param|x": "첫 번째 숫자",
    "Math.idiv|param|y": "두 번째 숫자",
    "Math.imul": "두 숫자를 곱한 값인 부호 있는 32비트 정수를 반환합니다.",
    "Math.imul|param|x": "첫 번째 숫자",
    "Math.imul|param|y": "두 번째 숫자",
    "Math.log": "숫자의 자연 로그(기본 e)를 반환합니다.",
    "Math.log|param|x": "숫자",
    "Math.map": "어떤 범위의 값을 다른 범위의 값으로 다시 매핑합니다. 즉,``이전 최소값`` 은 ``최소값``으로, ``이전 최대값`` 은 ``최대값``으로 범위가 변경되고, 이전 범위에 포함되는 값도 새로운 범위 이내의 값으로 변경됩니다.",
    "Math.map|param|fromHigh": "",
    "Math.map|param|fromLow": "현재 전류값의 최소 범위",
    "Math.map|param|toHigh": "",
    "Math.map|param|toLow": "변경할 전류값의 최소 범위",
    "Math.map|param|value": "범위를 변경할 현재 값",
    "Math.max": "",
    "Math.min": "",
    "Math.pow": "",
    "Math.pow|param|x": "",
    "Math.pow|param|y": "",
    "Math.random": "",
    "Math.randomBoolean": "'참(true)' 또는 '거짓(false)' 값을 랜덤으로 리턴합니다. 동전을 던져, 앞뒤를 확인하는 것과 비슷합니다.",
    "Math.randomRange": "",
    "Math.randomRange|param|max": "상위 포함 경계(예: 10)",
    "Math.randomRange|param|min": "하위 포함 경계(예: 0)",
    "Math.round": "가장 가까운 숫자로 반올림한 제공된 숫자 표현식을 반환합니다.",
    "Math.roundWithPrecision": "",
    "Math.roundWithPrecision|param|digits": "",
    "Math.roundWithPrecision|param|x": "",
    "Math.round|param|x": "가장 가까운 숫자로 반올림할 값입니다.",
    "Math.sign": "",
    "Math.sign|param|x": "",
    "Math.sin": "숫자의 사인을 반환합니다.",
    "Math.sin|param|x": "각도(라디안 단위)",
    "Math.sqrt": "",
    "Math.sqrt|param|x": "",
    "Math.tan": "숫자의 탄젠트를 반환합니다.",
    "Math.tan|param|x": "각도(라디안 단위)",
    "Math.trunc": "소수 부분을 잘라낸 숫자를 반환합니다.",
    "Math.trunc|param|x": "",
    "Number.toString": "",
    "PinEvent": "",
    "String": "텍스트 문자열을 연결하고, 잘라내고, 찾아냅니다.\n\n텍스트 문자열을 연결하고, 잘라내고, 찾아냅니다.",
    "String.charAt": "문자열에서 원하는 위치에 있는 문자를 리턴합니다.",
    "String.charAt|param|index": "",
    "String.charCodeAt": "원하는 위치에 있는 문자의 유니코드(Unicode) 값을 리턴합니다.",
    "String.charCodeAt|param|index": "",
    "String.compare": "두 개의 문자열(ASCII 인코딩)을 비교한 결과를 리턴합니다.",
    "String.compare|param|that": "비교할 문자열",
    "String.concat": "두 개 이상의 문자열을 결합한 문자열을 리턴합니다.",
    "String.concat|param|other": "",
    "String.fromCharCode": "아스키(ASCII) 코드 정수 값을, 문자로 만들어 리턴합니다.",
    "String.isEmpty": "",
    "String.length": "",
    "String.substr": "현재 문자열의 일부를 잘라만든, 부분 문자열을 리턴합니다.",
    "String.substr|param|length": "잘라낼 문자의 개수",
    "String.substr|param|start": "첫 문자 위치; 마지막 문자에서 부터 시작해서 음수 가능, 예시: 0",
    "lights": "디지털/아날로그 신호, 서보, I2C ... 에서 사용되는 핀의 전류를 제어합니다.",
    "lights.effect": "",
    "lights.effect|param|name": "",
    "lights.effect|param|value": "",
    "lights.set": "",
    "lights.setLevel": "",
    "lights.setLevel|param|name": "",
    "lights.setLevel|param|value": "",
    "lights.set|param|name": "",
    "lights.set|param|value": "",
    "loops": "",
    "loops.forever": "백그라운드에서 코드를 무한 반복 실행합니다. 백그라운드로 실행하는 동시에, 다른 코드를 함께 실행시킬 수 있습니다.",
    "loops.pause": "원하는 시간(ms, 1/1000초) 동안, 아무 작업도 하지 않고 시간을 보냅니다.",
    "loops.pause|param|ms": "예를 들면 다음과 같은 밀리초가 가능합니다: 100, 200, 500, 1000, 2000",
    "loops.timePicker": "",
    "loops.timePicker|param|ms": "밀리초 단위의 시간, 예시: 500, 1000",
    "parseInt": "",
    "pins": "디지털/아날로그 신호, 서보, I2C ... 에서 사용되는 핀의 전류를 제어합니다.",
    "pins.analogPin": "",
    "pins.analogPinMode": "",
    "pins.analogPinMode|param|mode": "",
    "pins.analogPinMode|param|name": "",
    "pins.analogPin|param|pin": "",
    "pins.analogRead": "아날로그로 커넥터 값을 읽습니다. 아날로그 값의 범위는 0 부터 1023 까지 범위의 값으로 읽어들입니다.",
    "pins.analogRead|param|name": "",
    "pins.analogWrite": "아날로그로 커넥터 값을 출력합니다. 아날로그 값의 범위는 0 부터 1023 까지 범위의 값으로 출력할 수 있습니다.",
    "pins.analogWrite|param|name": "",
    "pins.analogWrite|param|value": "핀으로 출력할 값 ``0`` 부터 ``1023``. 예시:1023,0",
    "pins.digitalPin": "",
    "pins.digitalPin|param|pin": "",
    "pins.digitalRead": "원하는 핀이나 커넥터에서 0 또는 1의 값만 읽어들입니다.",
    "pins.digitalRead|param|name": "",
    "pins.digitalWrite": "",
    "pins.digitalWrite|param|name": "",
    "pins.pinMode": "",
    "pins.pinMode|param|mode": "",
    "pins.pinMode|param|name": "",
    "rgb": "",
    "rgb.colors": "",
    "rgb.dim": "",
    "rgb.dim|param|level": "",
    "rgb.dim|param|rgb": "",
    "rgb.rgb": "",
    "rgb.rgb|param|blue": "",
    "rgb.rgb|param|green": "",
    "rgb.rgb|param|red": "",
    "rgb.setBrightness": "LED 출력의 밝기를 설정합니다. 이후 동작부터 반영됩니다.",
    "rgb.setBrightness|param|brightness": "",
    "rgb.setColor": "",
    "rgb.setColor|param|rgb": "",
    "rgb.setRGBLed": "",
    "rgb.wheel": "",
    "rgb.wheel|param|wheelPos": "",
    "sensing": "센서들로부터 전송된 이벤트와 데이터",
    "sensing.onPinEvent": "",
    "sensing.onPinEvent|param|body": "핀을 연결했다 놓았을 때 실행시킬 코드",
    "sensing.onPinEvent|param|name": "",
    "sensing.pressed": "",
    "sensing.pressed|param|name": "",
    "sensing.read": "",
    "sensing.read|param|name": ""
}