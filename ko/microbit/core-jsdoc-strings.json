{
    "AcceleratorRange.EightG": "가속도 센서를 이용해, 중력 가속도의 8배(8g)가 넘는 지를 측정합니다.",
    "AcceleratorRange.FourG": "가속도 센서를 이용해, 중력 가속도의 4배(4g)가 넘는 지를 측정합니다.",
    "AcceleratorRange.OneG": "가속도 센서를 이용해, 중력 가속도(1g)가 넘는 지를 측정합니다.",
    "AcceleratorRange.TwoG": "가속도 센서를 이용해, 중력 가속도의 2배(2g)가 넘는 지를 측정합니다.",
    "Array": "리스트에 들어있는 값들을 추가, 삭제, 변경합니다.",
    "Array.every": "",
    "Array.every|param|callbackfn": "",
    "Array.filter": "지정한 조건을 만족하는 배열 값을 찾아 리턴합니다.",
    "Array.filter|param|callbackfn": "매개 변수를 2개까지 사용할 수 있는 함수입니다. 배열에 저장되어있는 각 값을 순서대로 한 번씩 사용해 함수를 호출합니다.",
    "Array.forEach": "",
    "Array.forEach|param|callbackfn": "",
    "Array.get": "",
    "Array.get|param|index": "값을 가져올 위치(0번 부터 시작), 예: 0",
    "Array.indexOf": "배열에서 어떤 값이 처음 나타난 위치를 찾아 리턴합니다.",
    "Array.indexOf|param|fromIndex": "검색을 시작할 위치번호입니다. 시작번호를 생략하면 0 번 위치부터 검색을 시작합니다.",
    "Array.indexOf|param|item": "배열에 저장할 값.",
    "Array.insertAt": "",
    "Array.insertAt|param|index": "리스트에 값을 추가할 위치(0번 부터 시작), 예: 0",
    "Array.insertAt|param|value": "삽입할 위치, 예시: 0",
    "Array.join": "",
    "Array.join|param|sep": "",
    "Array.length": "",
    "Array.map": "배열의 각 요소에 대해 정의된 콜백 함수를 호출한 후 결과가 포함된 배열을 반환합니다.",
    "Array.map|param|callbackfn": "인수를 2개까지 허용하는 함수입니다. map 메서드는 배열의 각 요소에 대해 callbackfn 함수를 한 번 호출합니다.",
    "Array.pop": "배열의 마지막에 저장되어있는 값을 리턴하고, 그 값을 배열에서 제거합니다.",
    "Array.push": "",
    "Array.push|param|item": "배열의 마지막에 추가하기",
    "Array.reduce": "배열의 모든 요소에 대해 지정된 콜백 함수를 호출합니다. 콜백 함수의 반환 값은 누적된 결과이며 다음 번 콜백 함수 호출 시 인수로 제공됩니다.",
    "Array.reduce|param|callbackfn": "인수를 3개까지 허용하는 함수입니다. reduce 메서드는 배열의 각 요소에 대해 callbackfn 함수를 한 번 호출합니다.",
    "Array.reduce|param|initialValue": "누적을 시작하는 초기 값입니다. callbackfn 함수를 처음 호출하면 배열 값 대신 이 값이 인수로 사용됩니다.",
    "Array.removeAt": "배열에서 원하는 위치에 있는 데이터를 삭제합니다.",
    "Array.removeAt|param|index": "리스트에서 제거할 데이터의 위치(0번 부터 시작), 예: 0",
    "Array.removeElement": "",
    "Array.reverse": "데이터들의 순서를 반대로 뒤집어 만든 배열을 만들어 리턴합니다. 첫 번째 데이터는 마지막 위치로 이동되고, 마지막 데이터는 첫 번째 데이터가 됩니다.",
    "Array.set": "",
    "Array.set|param|index": "값을 저장할 목록 내의 0기반 위치입니다(예: 0).",
    "Array.shift": "배열의 첫 번재 위치에 저장되어있는 값을 리턴하고, 그 값을 배열에서 제거합니다. 배열의 크기(길이)가 줄어듭니다.",
    "Array.slice": "배열의 섹션을 반환합니다.",
    "Array.slice|param|end": "배열에서 지정된 부분의 끝입니다(예: 0).",
    "Array.slice|param|start": "배열에서 지정된 부분의 시작입니다(예: 0).",
    "Array.some": "",
    "Array.some|param|callbackfn": "",
    "Array.sort": "배열의 요소를 정렬한 후 배열을 반환합니다. 이 정렬 작업은 불안정할 수 있습니다.",
    "Array.splice": "배열에서 데이터들을 제거합니다.",
    "Array.splice|param|deleteCount": "제거할 요소의 개수입니다(예: 0).",
    "Array.splice|param|start": "배열에서 요소 제거를 시작할 0기반 위치입니다(예: 0).",
    "Array.unshift": "배열의 첫 번째 위치에 새 데이터를 삽입하고, 배열의 길이를 리턴합니다.",
    "Array.unshift|param|value": "배열의 처음 위치에 데이터를 삽입하기 위해",
    "Boolean.toString": "불 값을 문자열로 바꿔 리턴합니다.",
    "Buffer.fill": "원하는 값으로 버퍼(일부)를 채웁니다.",
    "Buffer.getNumber": "버퍼 내용을 읽어들여,  포맷 형식의 값을 읽어들입니다.",
    "Buffer.length": "버퍼 개체의 길이를 리턴합니다.",
    "Buffer.rotate": "버퍼에 들어있는 내용을 왼쪽으로 회전시킵니다.",
    "Buffer.rotate|param|length": "버퍼에 들어있는 항목의 개수. 음수이면, 버퍼 마지막부터 왼쪽 방향으로의 위치를 의미합니다. 예시: -1",
    "Buffer.rotate|param|offset": "시프트 회전시킬 길이; 오른쪽으로 회전시키는 경우 음 수를 사용하면 됩니다.",
    "Buffer.rotate|param|start": "버퍼 내용을 읽어들일 시작(offset) 위치. 기본 값은 0.",
    "Buffer.setNumber": "포맷 형식을 맞추어, 수를 버퍼에 기록합니다.",
    "Buffer.shift": "현재 버퍼에 들어있는 내용을 왼쪽으로 시프트 시킵니다. 기본 상태는 0.",
    "Buffer.shift|param|length": "버퍼에 들어있는 항목의 개수. 음수이면, 버퍼 마지막부터 왼쪽 방향으로의 위치를 의미합니다. 예시: -1",
    "Buffer.shift|param|offset": "시프트 회전시킬 길이; 오른쪽으로 회전시키는 경우 음 수를 사용하면 됩니다.",
    "Buffer.shift|param|start": "버퍼 내용을 읽어들일 시작(offset) 위치. 기본 값은 0.",
    "Buffer.slice": "버퍼에서 잘라낸, 데이터 조각을 리턴합니다.",
    "Buffer.write": "현재 버퍼의 `dstOffset` 위치에 `src` 를 씁니다.",
    "EventCreationMode": "이벤트 생성 방법",
    "EventCreationMode.CreateAndFire": "MicroBitEvent 가 초기화되고, 이벤트 처리기가 삭제되었습니다.(인터럽트에서 사용하는 것은 적절하지 않습니다!)",
    "EventCreationMode.CreateOnly": "MicroBitEvent 가 초기화되고, 작업이 중단되었습니다.",
    "Gesture.EightG": "가속도 8G 이상이 되면 신호가 발생합니다.",
    "Gesture.FreeFall": "자유 낙하가 되면 신호가 발생합니다!",
    "Gesture.LogoDown": "보드를 세웠을 때, 로고가 땅 방향이 되면 신호가 발생합니다.",
    "Gesture.LogoUp": "보드를 세웠을 때, 로고가 하늘 방향이 되면 신호가 발생합니다.",
    "Gesture.ScreenDown": "보드를 눕혔을 때, 스크린이 하늘 방향이 되면 신호가 발생합니다.",
    "Gesture.ScreenUp": "보드를 눕혔을 때, 스크린이 땅 방향이 되면 신호가 발생합니다.",
    "Gesture.Shake": "흔들리면 신호가 발생합니다.",
    "Gesture.SixG": "가속도 6G 이상이 되면 신호가 발생합니다.",
    "Gesture.ThreeG": "가속도 3G 이상이 되면 신호가 발생합니다.",
    "Gesture.TiltLeft": "스크린을 왼쪽으로 기울이면 신호가 발생합니다.",
    "Gesture.TiltRight": "스크린을 오른쪽으로 기울이면 신호가 발생합니다.",
    "Image.clear": "모든 픽셀을 끕니다.",
    "Image.height": "가로 줄의 개수(높이)를 가져옵니다. (항상 5)",
    "Image.pixel": "``(x,y)`` 위치의 LED 상태(on/off)를 가져옵니다.",
    "Image.pixelBrightness": "그 위치의 LED 밝기([0..255])를 가져옵니다.",
    "Image.pixel|param|x": "",
    "Image.pixel|param|y": "",
    "Image.plotFrame": "``index`` 번째 프레임을 스크린 화면에 출력합니다.",
    "Image.plotFrame|param|xOffset": "이미지 출력을 시작하는 열(세로 줄) 번호",
    "Image.plotImage": "주어진 세로 줄 위치부터 이미지를 출력합니다.",
    "Image.scrollImage": "이미지를 스크롤합니다.",
    "Image.scrollImage|param|frameOffset": "x offset 은 각 애니메이션 단계에서 바뀝니다. 예시: 1, 2, 5",
    "Image.scrollImage|param|interval": "애니메이션을 출력하기 위해 화면이 바뀌는 갱신 시간(밀리초), 예시: 200",
    "Image.setPixel": "``(x,y)`` 위치의 LED 상태를 설정합니다.",
    "Image.setPixelBrightness": "주어진 위치에 있는 LED 의 출력 밝기를 설정합니다.",
    "Image.setPixel|param|value": "",
    "Image.setPixel|param|x": "",
    "Image.setPixel|param|y": "",
    "Image.showFrame": "이미지 스트립의 특정 프레임을 출력합니다.",
    "Image.showFrame|param|frame": "",
    "Image.showImage": "가로 방향 좌표 ``x offset`` 를 시작위치로 이미지를 출력합니다.",
    "Image.showImage|param|xOffset": "이미지 출력을 시작하는 열(세로 줄) 번호",
    "Image.width": "세로 줄의 개수(너비)를 가져옵니다.",
    "Math": "수를 이용한 복잡한 연산입니다.",
    "Math.abs": "(그 값의 부호와 상관없이) 어떤 수의 절대값을 리턴합니다.\n예를 들어, -5와 5의 절대값은 모두 5입니다.",
    "Math.abs|param|x": "절댓값이 필요한 경우의 수학 표현식.",
    "Math.ceil": "해당 숫자 인수보다 크거나 같은 가장 작은 숫자를 반환합니다.",
    "Math.ceil|param|x": "",
    "Math.floor": "해당 숫자 인수보다 작거나 같은 가장 큰 숫자를 반환합니다.",
    "Math.floor|param|x": "",
    "Math.idiv": "두 숫자를 나눈 값인 부호 있는 32비트 정수를 반환합니다.",
    "Math.idiv|param|x": "첫 번째 숫자",
    "Math.idiv|param|y": "두 번째 숫자",
    "Math.imul": "두 숫자를 곱한 값인 부호 있는 32비트 정수를 반환합니다.",
    "Math.imul|param|x": "첫 번째 숫자",
    "Math.imul|param|y": "두 번째 숫자",
    "Math.max": "입력된 두 수학 표현식의 값을 평가하고 그 중 큰 값을 리턴합니다.",
    "Math.min": "입력된 두 수학 표현식의 값을 평가하고 그 중 작은 값을 리턴합니다.",
    "Math.pow": "",
    "Math.pow|param|x": "거듭제곱할 값.",
    "Math.pow|param|y": "거듭제곱할 횟수(지수).",
    "Math.random": "",
    "Math.randomBoolean": "'참(true)' 또는 '거짓(false)' 값을 랜덤으로 리턴합니다. 동전을 던져, 앞뒤를 확인하는 것과 비슷합니다.",
    "Math.random|param|limit": "생성할 수의 상한, 예시: 4",
    "Math.round": "가장 가까운 숫자로 반올림한 제공된 숫자 표현식을 반환합니다.",
    "Math.round|param|x": "가장 가까운 숫자로 반올림할 값입니다.",
    "Math.sign": "x 의 부호(양수, 음수, 0)를 리턴합니다.",
    "Math.sign|param|x": "테스트할 수학 표현식",
    "Math.sqrt": "",
    "Math.sqrt|param|x": "수학 표현식.",
    "Math.trunc": "소수 부분을 잘라낸 숫자를 반환합니다.",
    "Math.trunc|param|x": "",
    "Number.toString": "",
    "String": "텍스트 문자열을 연결하고, 잘라내고, 찾아냅니다.\n\n텍스트 문자열을 연결하고, 잘라내고, 찾아냅니다.",
    "String.charAt": "문자열에서 원하는 위치에 있는 문자를 리턴합니다.",
    "String.charAt|param|index": "",
    "String.charCodeAt": "원하는 위치에 있는 문자의 유니코드(Unicode) 값을 리턴합니다.",
    "String.charCodeAt|param|index": "문자를 뽑아낼 위치번호. 지정한 위치에 문자가 없는 경우, NaN 이 리턴됩니다.",
    "String.compare": "두 개의 문자열(ASCII 인코딩)을 비교한 결과를 리턴합니다.",
    "String.compare|param|that": "비교할 문자열",
    "String.concat": "두 개 이상의 문자열을 결합한 문자열을 리턴합니다.",
    "String.concat|param|other": "",
    "String.fromCharCode": "아스키(ASCII) 코드 정수 값을, 문자로 만들어 리턴합니다.",
    "String.isEmpty": "문자열이 빈 문자열인지 나타내는 값을 리턴합니다.",
    "String.length": "",
    "String.substr": "현재 문자열의 일부를 잘라만든, 부분 문자열을 리턴합니다.",
    "String.substr|param|length": "",
    "String.substr|param|start": "",
    "basic": "마이크로비트의 모든 기본 기능을 사용할 수 있도록 해줍니다.",
    "basic.clearScreen": "모든 LED를 꺼서, 스크린을 지웁니다.",
    "basic.forever": "백그라운드에서 코드를 무한 반복 실행합니다. 백그라운드로 실행하는 동시에, 다른 코드를 함께 실행시킬 수 있습니다.",
    "basic.pause": "원하는 시간(ms, 1/1000초) 동안, 아무 작업도 하지 않고 시간을 보냅니다.",
    "basic.pause|param|ms": "예를 들면 다음과 같은 밀리초가 가능합니다: 100, 200, 500, 1000, 2000",
    "basic.plotLeds": "LED 스크린 화면에 5*5 픽셀의 이미지를 만들어 출력합니다.",
    "basic.plotLeds|param|leds": "on/off 시킬 LED 패턴",
    "basic.showAnimation": "LED 스크린 화면에 애니메이션을 그려 보여줍니다.",
    "basic.showAnimation|param|interval": "화면 갱신 시간(밀리초)",
    "basic.showAnimation|param|leds": "on/off 시킬 LED 패턴",
    "basic.showArrow": "",
    "basic.showArrow|param|direction": "화살표의 방향",
    "basic.showArrow|param|interval": "아이콘을 화면에 보여줄 시간(밀리초). 기본은 600 밀리초 입니다.",
    "basic.showIcon": "미리 내장되어있는 아이콘 모양을 골라, LED 스크린 화면에 출력합니다.",
    "basic.showIcon|param|icon": "미리 저장되어있는 아이콘 id",
    "basic.showIcon|param|interval": "아이콘을 화면에 보여줄 시간(밀리초). 기본은 600 밀리초 입니다.",
    "basic.showLeds": "LED 스크린 화면에 5*5 픽셀의 이미지를 만들어 출력합니다.",
    "basic.showLeds|param|interval": "화면에 그린 후 유지시킬 시간(밀리초)",
    "basic.showLeds|param|leds": "on/off 시킬 LED 패턴",
    "basic.showNumber": "화면에 숫자를 스크롤합니다. 한 번에 화면에 그릴 수 있으면(즉, 한 자리 숫자), 스크롤하지 않습니다.",
    "basic.showNumber|param|interval": "스크롤 스피드; 예시: 150, 100, 200, -100",
    "basic.showString": "스크린에 한 번에 한 개의 문자씩, 텍스트를 출력합니다. 문자를 한 화면으로 출력할 수 있으면(즉 문자 1개), 스크롤하지 않습니다.",
    "basic.showString|param|interval": "문자 변경 속도; 예시: 150, 100, 200, -100",
    "basic.showString|param|text": "스크린에 스크롤할 문자, 예시: \"Hello!\"",
    "control": "실행중/이벤트 유틸리티",
    "control.assert": "조건식이나 값이 거짓(false)인 경우, 시리얼통신 콘솔에 오류 메시지 098 을 출력합니다.",
    "control.deviceName": "",
    "control.deviceSerialNumber": "장치 내부에 저장되어있는 고유한 시리얼번호를 읽어옵니다.",
    "control.eventSourceId": "C + + 런타임 상수 값을 리턴합니다.",
    "control.eventTimestamp": "마지막으로 실행되었던 이벤트의 타임스탬프 값을 가져옵니다.",
    "control.eventValue": "마지막으로 실행되었던 이벤트 값을 가져옵니다.",
    "control.eventValueId": "C + + 런타임 상수 값을 리턴합니다.",
    "control.inBackground": "코드를 백그라운드로 실행하도록 합니다.",
    "control.onEvent": "",
    "control.panic": "오류 코드를 출력하고 프로그램 실행을 중단합니다.",
    "control.raiseEvent": "이벤트 신호를 발생시킵니다.",
    "control.raiseEvent|param|mode": "이벤트 생성 후 처리되어야 할 수도 있는 추가적 정의(기본 CREATE_AND_FIRE).",
    "control.raiseEvent|param|src": "마이크로비트 이벤트 ID. 예시: MICROBIT_ID_BUTTON_A",
    "control.raiseEvent|param|value": "이벤트 발생 원인을 나타내는 특정 코드 컴포넌트.",
    "control.reset": "BBC 마이크로비트를 리셋합니다.",
    "control.runtimeWarning": "시뮬레이터에서 경고를 표시합니다.",
    "control.waitMicros": "현재 수행하고 있는 작업 상태를, 마이크로초 단위로 대기(유지)시킵니다.",
    "control.waitMicros|param|micros": "대기(유지)시킬 마이크로초 시간. 예시: 4",
    "game": "LED 1개 움직이는 게임 엔진",
    "game.LedSprite": "게임 스프라이트는 LED 스크린 위에서 1개의 픽셀 LED로 출력됩니다.",
    "game.LedSprite.blink": "현재 스프라이트의 ``blink`` 갱신 주기(시간)를 확인합니다.",
    "game.LedSprite.brightness": "LED 스크린에 있는 스프라이트의 ``밝기``를 확인합니다.",
    "game.LedSprite.change": "스프라이트의 속성을 변경합니다.",
    "game.LedSprite.changeBlinkBy": "원하는 밀리초로 ``blink`` 주기를 바꿉니다.",
    "game.LedSprite.changeBlinkBy|param|ms": "",
    "game.LedSprite.changeBrightnessBy": "원하는 값 만큼 ``y`` 좌표를 변경합니다.",
    "game.LedSprite.changeBrightnessBy|param|value": "밝기 변경 값",
    "game.LedSprite.changeDirectionBy": "원하는 값 만큼 ``direction`` 방향의 오른쪽으로 회전시킵니다.",
    "game.LedSprite.changeDirectionBy|param|angle": "",
    "game.LedSprite.changeXBy": "원하는 값 만큼 ``x`` 좌표를 변경합니다.",
    "game.LedSprite.changeXBy|param|x": "",
    "game.LedSprite.changeYBy": "원하는 값 만큼 ``y`` 좌표를 변경합니다.",
    "game.LedSprite.changeYBy|param|y": "",
    "game.LedSprite.change|param|property": "변경하려는 속성의 이름",
    "game.LedSprite.change|param|value": "변화량, 예시: 1",
    "game.LedSprite.delete": "게임 엔진에서 스프라이트를 삭제합니다. 삭제된 스프라이트는 더 이상 화면에 표시되지 않고, 다른 스프라이트와 상호 작용하지 않게 됩니다.",
    "game.LedSprite.direction": "현재 스프라이트의 방향을 알아냅니다.",
    "game.LedSprite.get": "스프라이트의 속성을 읽어옵니다.",
    "game.LedSprite.get|param|property": "변경하려는 속성의 이름",
    "game.LedSprite.goTo": "화면의 이 위치로 이동시킵니다.",
    "game.LedSprite.goTo|param|x": "",
    "game.LedSprite.goTo|param|y": "",
    "game.LedSprite.ifOnEdgeBounce": "LED 스크린 화면의 가장자리 경계(벽)에 닿으면, 이동 방향을 반대로 바꾸도록 설정합니다.",
    "game.LedSprite.isTouching": "스프라이트가 다른 스프라이트와 같은 위치에 있으면 참(true)을 리턴합니다.",
    "game.LedSprite.isTouchingEdge": "스프라이트가 가장자리 경계(벽)에 닿으면 참(true)을 리턴합니다.",
    "game.LedSprite.isTouching|param|other": "",
    "game.LedSprite.move": "현재 방향으로 원하는 거리만큼 이동시킵니다.",
    "game.LedSprite.move|param|leds": "이동시킬 LED 좌표량, 예시: 1, -1",
    "game.LedSprite.off": "스프라이트 숨김(보임 기본)",
    "game.LedSprite.on": "스프라이트 보임(보임 기본)",
    "game.LedSprite.set": "스프라이트의 속성을 설정합니다.",
    "game.LedSprite.setBlink": "화면을 바꾸는 갱신 시간을 밀리초 단위로 설정합니다.",
    "game.LedSprite.setBlink|param|ms": "",
    "game.LedSprite.setBrightness": "스프라이트의 ``밝기`` 를 설정합니다.",
    "game.LedSprite.setBrightness|param|brightness": "밝기 값의 범위: 0(끔) ~ 255(가장 밝게 켬), 예시: 255.",
    "game.LedSprite.setDirection": "현재 스프라이트의 방향을 설정합니다. 45의 배수 단위로 반올림 됩니다.",
    "game.LedSprite.setDirection|param|degrees": "",
    "game.LedSprite.setX": "스프라이트의 ``x`` 좌표를 설정합니다.",
    "game.LedSprite.setX|param|x": "",
    "game.LedSprite.setY": "스프라이트의 ``y`` 좌표를 설정합니다.",
    "game.LedSprite.setY|param|y": "",
    "game.LedSprite.set|param|property": "변경하려는 속성의 이름",
    "game.LedSprite.turn": "스프라이트가 바라보는(이동하고 있는) 방향을 회전시킵니다.",
    "game.LedSprite.turnLeft": "스프라이트 왼쪽(반시계 방향)으로 회전",
    "game.LedSprite.turnLeft|param|degrees": "",
    "game.LedSprite.turnRight": "스프라이트 오른쪽(시계 방향)으로 회전",
    "game.LedSprite.turnRight|param|degrees": "",
    "game.LedSprite.turn|param|degrees": "회전 시킬 각도, 예시: 45, 90, 180, 135",
    "game.LedSprite.turn|param|direction": "왼쪽 또는 오른쪽",
    "game.LedSprite.x": "LED 스크린에 있는 스프라이트의 ``x`` 좌표를 확인합니다.",
    "game.LedSprite.y": "LED 스크린에 있는 스프라이트의 ``y`` 좌표를 확인합니다.",
    "game.addLife": "현재 라이프에 포인트를 추가합니다.",
    "game.addLife|param|lives": "",
    "game.addScore": "현재 점수에 포인트를 추가하고 애니메이션을 보여 줍니다.",
    "game.addScore|param|points": "점수에 추가 시키고 싶은 양, 예시: 1",
    "game.createSprite": "오른쪽 방향을 바라보는 상태의 새로운 스프라이트를 생성합니다.",
    "game.createSprite|param|x": "스프라이트 수평(좌우)방향 좌표, 예: 2",
    "game.createSprite|param|y": "스프라이트 수직(위아래)방향 좌표, 예: 2",
    "game.currentTime": "남은 시간(`카운트다운 시작` 후 흐른시간)이나, 현재 시간(전원 공급 후 또는`스톱워치 시작` 후) 을 밀리초 단위로 알아냅니다.",
    "game.gameOver": "게임 종료 애니메이션과 점수를 출력합니다.",
    "game.invalidSprite": "유효하지 않은 스프라이트를 가져옵니다.; 초기화를 위해 사용되었던.",
    "game.isGameOver": "게임이 종료가 되었는지를 나타냅니다.",
    "game.isPaused": "다른 애니메이션을 출력할 수 있도록, 게임 렌더링이 일시 중지 된 경우인지 알아냅니다.",
    "game.isRunning": "게임이 실행 중인지의 여부를 나타내는 값을 가져옵니다. 게임이 종료된 경우 '거짓(false)'을 리턴합니다.",
    "game.level": "현재 레벨을 읽어옵니다.",
    "game.levelUp": "레벨을 올리고 메시지를 출력합니다.",
    "game.life": "현재 라이프를 읽어옵니다.",
    "game.pause": "게임 렌더링 엔진을 일시 중지시켜 다른 애니메이션을 출력할 수 있도록 합니다.",
    "game.removeLife": "현재 라이프를 제거합니다.",
    "game.removeLife|param|life": "",
    "game.resume": "게임 렌더링 엔진을 다시 재개 시킵니다.",
    "game.score": "현재 점수를 읽어옵니다.",
    "game.setLife": "현재 라이프를 설정합니다.",
    "game.setLife|param|value": "",
    "game.setScore": "현재 점수를 설정 합니다.",
    "game.setScore|param|value": "새 점수",
    "game.showScore": "점수를 스크린에 출력합니다.",
    "game.startCountdown": "애니메이션을 출력한 후, 게임 카운트 다운 타이머가 시작됩니다. 타이머가 0이 되면 게임 오버 됩니다.",
    "game.startCountdown|param|ms": "밀리초 단위의 카운트 다운 시간, 예시: 10000",
    "game.startStopwatch": "스톱 워치 타이머를 시작합니다. '현재 시간' 은 남은 시간을 리턴할 것입니다.",
    "images": "LED 이미지를 만들고, 수정하고, 출력해줍니다.",
    "images.createBigImage": "2배 크기의 이미지를 만듭니다.",
    "images.createImage": "LED 스크린 크기의 이미지를 만듭니다.",
    "input": "센서들로부터 전송된 이벤트와 데이터",
    "input.acceleration": "가속도 센서로 읽어들인 가속도 값을 밀리g 단위로 읽어옵니다.(스크린을 하늘 방향으로 놓은 상태에서는x=0, y=0, z=-1024 가 됩니다.)",
    "input.acceleration|param|dimension": "",
    "input.buttonIsPressed": "``A``, ``B`` 버튼의 상태를 읽어옵니다.(눌림, 놓임)",
    "input.buttonIsPressed|param|button": "상태를 검사할 버튼, 예시: 버튼 A",
    "input.calibrate": "구버전입니다. 대신 자기(나침반) 센서 보정을 사용하세요.",
    "input.calibrateCompass": "구버전입니다. 자기(나침반) 센서 보정은 자동으로 이루어집니다.",
    "input.compassHeading": "자기(나침반) 센서로 읽어들인, 북극 방향의 각도를 읽어옵니다.(나침반 바늘이 가리키는 북쪽 방향)",
    "input.lightLevel": "빛 센서로 읽어들인 빛의 밝기를 0(어두움) ~ 255(가장 밝음) 범위로 변환해 읽어옵니다. LED 스크린을 빛 센서 입력처럼 사용합니다.",
    "input.magneticForce": "자기(나침반) 센서로 감지한 자기력 값을, `마이크로-테슬라` (`µT`) 단위로 읽어옵니다.\n 시뮬레이터에서는 이 기능을 시험해 볼 수 없습니다.",
    "input.magneticForce|param|dimension": "",
    "input.onButtonPressed": "버튼(A, B, A+B)을 눌렀다 놓으면, 설정한 작업을 실행합니다.",
    "input.onButtonPressed|param|body": "이벤트가 발생하면 실행시킬 코드",
    "input.onButtonPressed|param|button": "누를 버튼",
    "input.onGesture": "제스쳐(마이크로비트를 흔드는 것과 같은) 동작이 발생하면, 설정한 작업을 실행합니다.",
    "input.onGesture|param|body": "제스쳐 움직임이 발생하면 실행시킬 코드",
    "input.onGesture|param|gesture": "감지할 제스쳐, 예시: 제스쳐.흔들기",
    "input.onLogoDown": "마이크로비트 보드를 세운 후, 마이크로비트 마크를 땅 바닥쪽으로 향하게 돌렸을 때, 실행시킬 코드를 붙입니다.",
    "input.onLogoDown|param|body": "",
    "input.onLogoUp": "마이크로비트 보드를 세운 후, 마이크로비트 마크를 하늘쪽으로 향하게 돌렸을 때, 실행시킬 코드를 붙입니다.",
    "input.onLogoUp|param|body": "",
    "input.onPinPressed": "핀이 연결(on)되었다가 끊기면(off), 설정한 작업을 실행합니다. (GND 핀과 연결되어도 실행됩니다.)",
    "input.onPinPressed|param|body": "핀을 연결했다 놓았을 때 실행시킬 코드",
    "input.onPinPressed|param|name": "연결을 감지할 핀, 예시: 터치핀.P0",
    "input.onPinReleased": "핀이 연결(on)되었다가 끊기면(off), 설정한 작업을 실행합니다.",
    "input.onPinReleased|param|body": "핀이 연결되었다가 끊기면 실행시킬 코드",
    "input.onPinReleased|param|name": "끊김을 감지할 핀, 예시: 터치핀.P0",
    "input.onScreenDown": "스크린이 땅바닥 방향을 향할 때, 실행시킬 코드를 붙입니다.",
    "input.onScreenDown|param|body": "",
    "input.onScreenUp": "스크린이 하늘 방향을 향할 때, 실행시킬 코드를 붙입니다.",
    "input.onScreenUp|param|body": "",
    "input.onShake": "흔들었을 때, 실행시킬 코드를 붙입니다.",
    "input.onShake|param|body": "",
    "input.pinIsPressed": "핀의 눌림(연결) 여부 상태를 감지합니다. 접지(GND)와 연결시키면 회로가 끊깁니다.",
    "input.pinIsPressed|param|name": "터치를 감지하기 위해 사용할 핀, 예시: 터치핀.P0",
    "input.rotation": "기울기 센서로 읽어들인, 앞-뒤 또는 좌-우로 기울여진 기울기 값을 읽어옵니다. ``x-축`` 또는 ``y-축`` 회전 각도.",
    "input.rotation|param|kind": "",
    "input.runningTime": "전원이 켜진 후 흐른 시간을 밀리초(ms) 단위로 읽어옵니다.",
    "input.runningTimeMicros": "전원이 켜진 후 흐른 시간을 마이크로초(µs) 단위로 읽어옵니다.",
    "input.setAccelerometerRange": "가속도 센서의 감지 기준값을 원하는 중력가속도(g)로 설정합니다.",
    "input.setAccelerometerRange|param|range": "측정할 최대 중력 가속도의 크기를 설정합니다.",
    "input.temperature": "온도 센서로 읽어들인 온도를, 섭씨(°C) 단위로 읽어옵니다.",
    "led": "LED 스크린 제어",
    "led.brightness": "현재 LED 스크린의 LED 밝기 설정 값을 읽어옵니다. 0(끔) ~ 255(가장 밝음)",
    "led.displayMode": "현재 LED 디스플레이 모드를 가져옵니다.",
    "led.enable": "스크린의 모든 LED를 켜거나 끕니다.",
    "led.fadeIn": "LED 스크린을 천천히 밝게 켭니다.",
    "led.fadeIn|param|ms": "",
    "led.fadeOut": "LED 스크린을 천천히 어둡게 끕니다.",
    "led.fadeOut|param|ms": "",
    "led.plot": "원하는 LED를 x좌표(위에서 아래로), y좌표(왼쪽에서 오른쪽으로)를 이용해 켭니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.plotAll": "스크린의 모든 LED를 켭니다.",
    "led.plotBarGraph": "`표현할 값`과 `가능한 최댓값`을 이용해, LED 스크린에 그 비율을 표현하는 형태의 막대 그래프를 출력합니다. 만약 `가능한 최댓값`이 0 이면, 자동으로 조정됩니다.",
    "led.plotBarGraph|param|high": "최대 값. 만약, 0인 경우, 최대 값이 자동으로 조정됩니다. 예시: 0",
    "led.plotBarGraph|param|value": "막대 그래프형으로 LED 스크린에 표현할 값",
    "led.plotBrightness": "원하는 LED와 밝기를, x좌표(위에서 아래로), y좌표(왼쪽에서 오른쪽으로)를 이용해 설정합니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.plotBrightness|param|brightness": "0(끔) ~ 255(가장 밝음) 범위의 밝기, 예시:255",
    "led.plotBrightness|param|x": "0번 부터 시작하는 LED 가로 좌표",
    "led.plotBrightness|param|y": "0번 부터 시작하는 LED 세로 좌표",
    "led.plot|param|x": "0번 부터 시작하는 LED 가로 좌표",
    "led.plot|param|y": "0번 부터 시작하는 LED 세로 좌표",
    "led.point": "LED의 on/off 상태를, x좌표(위에서 아래로)와 y좌표(왼쪽에서 오른쪽으로)를 이용해 읽어옵니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.point|param|x": "",
    "led.point|param|y": "",
    "led.screenshot": "LED 스크린의 상태를 이미지로 가져옵니다.",
    "led.setBrightness": "스크린의 LED 밝기를, 0(어두움) ~ 255(가장 밝음) 범위의 정수 값으로 설정합니다.",
    "led.setBrightness|param|value": "밝기 값, 예시:255, 127, 0",
    "led.setDisplayMode": "LED를 이용해 이미지/애니메이션을 표시하기 위해, LED 스크린의 디스플레이모드를 흑/백, 그레이스케일로 설정합니다.",
    "led.setDisplayMode|param|mode": "LED 스크린을 동작시킬 디스플레이 모드",
    "led.stopAnimation": "LED 스크린 애니메이션을 중단하고, 실행 대기 상태에 있는 다른 애니메이션도 모두 삭제합니다.",
    "led.toggle": "LED 상태를 반대로 바꿉니다.(on->off, off->on)",
    "led.toggleAll": "현재 상태의 반대로 LED 상태를 바꿉니다.",
    "led.toggle|param|x": "",
    "led.toggle|param|y": "",
    "led.unplot": "원하는 LED를 x좌표(위에서 아래로), y좌표(왼쪽에서 오른쪽으로)를 이용해 끕니다. (0,0)은 가장 윗쪽의 가장 왼쪽 위치를 의미합니다.",
    "led.unplot|param|x": "",
    "led.unplot|param|y": "",
    "music": "음을 연주해 음악을 만들어냅니다.",
    "music.beat": "음을 지속할 박자(시간). 밀리초(ms)",
    "music.beginMelody": "멜로디 소리를 출력합니다. 악보는 다음과 같은 기호들로 표현됩니다.: NOTE[octave][:duration]",
    "music.beginMelody|param|melodyArray": "",
    "music.beginMelody|param|options": "멜로디 재생 옵션, 한 번 / 계속, 실행 / 백그라운드로 실행",
    "music.builtInMelody": "내장 되어있는 멜로디 배열을 가져옵니다.",
    "music.changeTempoBy": "원하는 빠르기로 바꿉니다.",
    "music.changeTempoBy|param|bpm": "빠르기 변화 값, 예시: 20",
    "music.noteFrequency": "음계 또는 음의 주파수",
    "music.noteFrequency|param|name": "음 이름, 예시: Note.C",
    "music.onEvent": "멜로디 이벤트가 발생하면, 코드를 실행합니다.",
    "music.playTone": "`P0` 번 핀을 통해 원하는 음과 박자로 재생합니다.",
    "music.playTone|param|frequency": "",
    "music.playTone|param|ms": "밀리초(ms) 단위 지속 시간",
    "music.rest": "`P0` 번 핀을 통해 원하는 원하는 박자의 시간만큼 유지합니다.(음을 바꾸지는 않습니다.)",
    "music.rest|param|ms": "밀리초(ms) 단위 무음 시간",
    "music.ringTone": "`P0` 번 핀을 통해 원하는 음을 재생합니다.",
    "music.ringTone|param|frequency": "",
    "music.setPlayTone": "멜로디를 재생하기 위한 음 재생 함수를 직접 설정한다.",
    "music.setTempo": "원하는 빠르기를 설정합니다.",
    "music.setTempo|param|bpm": "새로운 분당 템포 비트, 예시: 120",
    "music.tempo": "현재 빠르기(bpm)를 읽어옵니다. 빠르기는 음이 재생되는 속도(bpm = 1분당 비트 수)를 의미합니다. 빠르기 값이 크면 클 수록, 악보가 빠르게 연주됩니다.",
    "parseInt": "",
    "pins": "디지털/아날로그 신호, 서보, I2C ... 에서 사용되는 핀의 전류를 제어합니다.",
    "pins.analogPitch": "PWM(Pulse-width modulation) 신호를 현재의 주파수 출력 핀에 발생 시킵니다. 주파수 출력 핀을 설정하기 위해서는 `아날로그 주파수 출력 핀' 메뉴를 사용하면 됩니다.",
    "pins.analogPitch|param|frequency": "출력할 PWM 주파수 Hz.",
    "pins.analogPitch|param|ms": "밀리초 단위 주파수 출력 시간",
    "pins.analogReadPin": "아날로그로 커넥터 값을 읽습니다. 아날로그 값의 범위는 0 부터 1023 까지 범위의 값으로 읽어들입니다.",
    "pins.analogReadPin|param|name": "출력할 핀 번호, 예시: 아날로그핀.P0",
    "pins.analogSetPeriod": "설정한 **밀리초** 또는 `1/1000` 밀리초 값으로 아날로그 PWM 출력을 설정합니다.\n(`아날로그 출력 핀` 을 이용해) 아날로그 출력 핀으로 설정되어있지 않은 경우에는, 효과가 없습니다.",
    "pins.analogSetPeriod|param|micros": "마이크로초 단위 시간. 예시:20000",
    "pins.analogSetPeriod|param|name": "시간을 설정할 아날로그 핀 번호, 예시: 아날로그핀.P0",
    "pins.analogSetPitchPin": "`아날로그 주파수 출력` 또는 음악 출력을 위해 핀을 설정합니다.",
    "pins.analogSetPitchPin|param|name": "주파수 출력을 위한 핀 설정",
    "pins.analogWritePin": "아날로그로 커넥터 값을 출력합니다. 아날로그 값의 범위는 0 부터 1023 까지 범위의 값으로 출력할 수 있습니다.",
    "pins.analogWritePin|param|name": "출력할 핀 이름, 예시: 아날로그핀.P0",
    "pins.analogWritePin|param|value": "핀으로 출력할 값 ``0`` 부터 ``1023``. 예시:1023,0",
    "pins.createBuffer": "모두 0 으로 초기화한 새 배열을 만듭니다.",
    "pins.createBuffer|param|size": "버퍼의 크기(바이트 수)",
    "pins.digitalReadPin": "원하는 핀이나 커넥터에서 0 또는 1의 값만 읽어들입니다.",
    "pins.digitalReadPin|param|name": "값을 읽어들일 핀, 예시: 디지털핀.P0",
    "pins.digitalWritePin": "핀이나 커넥터에 0 또는 1의 값만 출력합니다.",
    "pins.digitalWritePin|param|name": "출력할 핀, 예시: 디지털핀.P0",
    "pins.digitalWritePin|param|value": "핀에 설정할 값, 1 또는 0",
    "pins.i2cReadBuffer": "7비트 I2C '주소'에서 '크기'(바이트)를 읽어옵니다.",
    "pins.i2cReadNumber": "7비트 I2C 주소에서 값을 읽음",
    "pins.i2cWriteBuffer": "7비트 I2C '주소'에 값을 씀.",
    "pins.i2cWriteNumber": "7비트 I2C 주소에 값을 씀",
    "pins.map": "어떤 범위의 값을 다른 범위의 값으로 다시 매핑합니다. 즉,``이전 최소값`` 은 ``최소값``으로, ``이전 최대값`` 은 ``최대값``으로 범위가 변경되고, 이전 범위에 포함되는 값도 새로운 범위 이내의 값으로 변경됩니다.",
    "pins.map|param|fromHigh": "현재 전류값의 최대 범위, 예시: 1023",
    "pins.map|param|fromLow": "현재 전류값의 최소 범위",
    "pins.map|param|toHigh": "변경할 전류값의 최대 범위, 예시: 4",
    "pins.map|param|toLow": "변경할 전류값의 최소 범위",
    "pins.map|param|value": "범위를 변경할 현재 값",
    "pins.onPulsed": "이 핀을 디지털 입력 핀으로 설정하고, 핀의 ``high``, ``low`` 상태를 주기적으로 검사해 이벤트를 발생시킵니다.",
    "pins.onPulsed|param|name": "등록할 핀, 예시: 디지털핀.P0",
    "pins.onPulsed|param|pulse": "펄스 값, 예시: 펄스값.High",
    "pins.pulseDuration": "마이크로초 단위로 펄스 주파수의 길이를 측정합니다. 이 기능은 ``디지털입력 감지하면 실행`` 이벤트 핸들러에 의해서 호출되어야 합니다.",
    "pins.pulseIn": "입력되는 펄스의 주기를 마이크로초(µs) 단위로 알아냅니다.",
    "pins.pulseIn|param|name": "펄스를 측정할 핀, 예시: 디지털핀.P0",
    "pins.pulseIn|param|value": "펄스 값, 예시: 펄스값.High",
    "pins.servoSetPulse": "이 입출력 핀에 원하는 **microseconds** 나 `1/1000` 밀리초로, 아날로그/PWM 출력, 20ms 주기, 진폭을 설정합니다.",
    "pins.servoSetPulse|param|micros": "마이크로초 단위의 펄스 주기, 예시:1500",
    "pins.servoSetPulse|param|name": "핀 이름",
    "pins.servoWritePin": "서보 회전을 제어하는 값을 출력합니다. 일반 서보에서는, 축의 각도(도 단위)를 설정하고 원하는 방향으로 축을 회전시킵니다. 무한 회전 서보에서는, 원하는 속도로 축을 회전시킵니다.(``0`` 은 정방향 최고 회전 속도, ``180`` 은 역방향 최고 회전 속도를 의미하고, ``90`` 근처는 회전 하지 않는 값으로 사용됩니다.)",
    "pins.servoWritePin|param|name": "출력할 핀 번호, 예시: 아날로그핀.P0",
    "pins.servoWritePin|param|value": "각도 또는 회전 속력, 예시:180,90,0",
    "pins.setEvents": "이 핀에 의해 발생되는 이벤트를 설정합니다. 이벤트는 ``control.onEvent()``를 통해 발생될 수 있습니다.",
    "pins.setEvents|param|name": "핀에 이벤트 모드를 설정합니다. 예시: 디지털핀.P0",
    "pins.setEvents|param|type": "이 핀이 발생시킬 이벤트 타입, 예시: 이벤트타입.Edge",
    "pins.setPull": "핀의 pull up/down 모드를 설정합니다.",
    "pins.setPull|param|name": "핀의 pull up/down 모드를 설정합니다. 예시: DigitalPin.P0",
    "pins.setPull|param|pull": "핀 pull up/down 모드 설정, 예시: PinPullMode.PullUp",
    "pins.sizeOf": "특정 수 형식에 사용되는 크기(바이트)를 읽어옵니다.",
    "pins.spiFormat": "SPI통신 비트와 모드를 설정합니다.",
    "pins.spiFormat|param|bits": "비트 수, 예시: 8",
    "pins.spiFormat|param|mode": "모드, 예시: 3",
    "pins.spiFrequency": "SPI통신 주파수를 설정합니다.",
    "pins.spiFrequency|param|frequency": "클록 주파수, 예시: 1000000",
    "pins.spiPins": "SPI 인스턴스에 의해 사용되는 MOSI, MISO, SCK 핀을 설정합니다.",
    "pins.spiWrite": "SPI 슬레이브에 출력하고, 응답을 리턴합니다.",
    "pins.spiWrite|param|value": "SPI 슬레이브에 전송될 데이터",
    "serial": "시리얼통신 연결을 통해 데이터를 읽어오고 출력합니다.",
    "serial.delimiters": "",
    "serial.onDataReceived": "",
    "serial.onDataReceived|param|delimiters": "전송된 문자들과 비교할 문자들",
    "serial.readBuffer": "",
    "serial.readBuffer|param|length": "기본 버퍼 길이, 예시: 64",
    "serial.readLine": "",
    "serial.readString": "",
    "serial.readUntil": "",
    "serial.readUntil|param|delimiter": "구분 기호는 각 텍스트 문자열들을 분리합니다.",
    "serial.redirect": "",
    "serial.redirectToUSB": "",
    "serial.redirect|param|rate": "새로운 전송(baud) 속도. 예시: 115200",
    "serial.redirect|param|rx": "새로운 수신 핀, 예시: 시리얼핀.P1",
    "serial.redirect|param|tx": "",
    "serial.writeBuffer": "",
    "serial.writeLine": "",
    "serial.writeNumber": "",
    "serial.writeNumbers": "",
    "serial.writeString": "",
    "serial.writeValue": "",
    "serial.writeValue|param|name": "값 스트림 이름, 예시: x",
    "serial.writeValue|param|value": "쓰기"
}